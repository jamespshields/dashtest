g.plot(imp, m, i)
imp2 <- g.impute(m2, i2)
g.plot(imp2, m2, i2)
g.plot(imp2, m2, i2, durplot=1)
g.plot(imp2, m2, i2, durplot=0.1)
g.plot(m2)
g.plot(i2)
g.plot(M = m2)
table(m$metalong$nonwearscore)
load("C:/Users/Tyler/Documents/R/win-library/3.1/GGIR/data/data.getmeta.RData")
IMP = g.impute(M = data.getmeta, I = data.inspectfile, strategy = 1,
hrs.del.start = 0, hrs.del.end = 0, maxdur = 0)
g.plot(IMP, M = data.getmeta, I = data.inspectfile, durplot=4)
data(data.inspectfile)
g.plot(IMP, M = data.getmeta, I = data.inspectfile, durplot=4)
dev.off()
g.plot(IMP, M = data.getmeta, I = data.inspectfile, durplot=4)
g.plot(imp, m, i, durplot=1)
dev.off()
g.plot(imp, m, i, durplot=1)
dev.off()
g.plot(imp, m, i, durplot=0.1)
if(Sys.info()["sysname"] == "Linux") {
wd <- "~/Dropbox/MEI/NCI/tyler/geneactiv/data/"
} else {
wd <- "C:/Users/Tyler/Documents/GitHub/GENEActivR/Data/"
}
## 5-13-2014 Test Data
## Read in binary file
testfile <- read.bin(paste0(wd, "TDS_left wrist_100001_2014-05-13 10-05-34.bin"))
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
testfile = "C:/Users/Tyler/Documents/GitHub/GENEActivR/Data/TDS_left wrist_100001_2014-05-13 10-05-34.bin"
attr(header.info(testfile), "calibration")$t1c
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
attr(header.info(testfile), "calibration")
header.info(testfile)
header <- header.info(testfile)
View(header)
header$measurement_period
header[5]
header[,5]
header[2,5]
header[1,5]
header[1,3]
View(header)
header$Measurement_Period
header$Value
header$Value[3]
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
imp <- g.impute(m, i)
shiny::runApp('GitHub/GENEActivR/genea-app')
procfile <- read.bin(testfile)
e <- apoch.apply(procfile)
e <- epoch.apply(procfile)
e <- epoch.mean(procfile)
plot(e)
plot(procfile[,1], svm(procfile), log="y", pch=".")
lines(epoch.mean(profile, incl.date=TRUE), lwd=2)
lines(epoch.mean(procfile, incl.date=TRUE), lwd=2)
plot(epoch.apply(procfile, epoch.size=3, FUN=function(t) mean(abs(svm(t) -1)>0.2) 0.5 ), type = "l")
plot(epoch.apply(procfile, epoch.size=3, FUN=function(t) mean(abs(svm(t) -1)>0.2)> 0.5 ), type = "l")
install.packages("mFilter")
library(GENEAread)
library(reshape)
library(ggplot2)
library(mFilter)
## set working directory depending on environment
if(Sys.info()["sysname"] == "Linux") {
wd <- "~/Dropbox/MEI/NCI/tyler/geneactiv/data/"
} else {
wd <- "C:/Users/Tyler/Documents/GitHub/GENEActivR/Data/"
}
## 5-13-2014 Test Data
## Read in binary file
testfile <- read.bin(paste0(wd, "TDS_left wrist_100001_2014-05-13 10-05-34.bin"))
# Place time,x,y,z into data frame
df <- data.frame(time=testfile$time, Acc.z=testfile$z)
## testing GRTime formatting
df$time <- as.POSIXct(format(df$time, format = "%Y-%m-%d %H:%M:%S"))
# Melt into new dataframe using 'reshape' package
df.melt <- melt(df, id="time")
View(df.melt)
View(df)
data(unemp)
opar <- par(no.readonly=TRUE)
unemp.bw <- bwfilter(unemp)
plot(unemp.bw)
unemp.bw2 <- bwfilter(unemp, freq=8,drift=TRUE)
unemp.bw3 <- bwfilter(unemp, freq=10, nfix=3, drift=TRUE)
unemp.bw4 <- bwfilter(unemp, freq=10, nfix=4, drift=TRUE)
par(mfrow=c(2,1),mar=c(3,3,2,1),cex=.8)
plot(unemp.bw1$x,
main="Butterworth filter of unemployment: Trend,
drift=TRUE",col=1, ylab="")
lines(unemp.bw1$trend,col=2)
lines(unemp.bw2$trend,col=3)
lines(unemp.bw3$trend,col=4)
lines(unemp.bw4$trend,col=5)
legend("topleft",legend=c("series", "freq=10, nfix=2",
"freq=8, nfix=2", "freq=10, nfix=3", "freq=10, nfix=4"),
col=1:5, lty=rep(1,5), ncol=1)
plot(unemp.bw1$cycle,
main="Butterworth filter of unemployment: Cycle,drift=TRUE",
col=2, ylab="", ylim=range(unemp.bw3$cycle,na.rm=TRUE))
lines(unemp.bw2$cycle,col=3)
lines(unemp.bw3$cycle,col=4)
lines(unemp.bw4$cycle,col=5)
## legend("topleft",legend=c("series", "freq=10, nfix=2", "freq=8,
## nfix=2", "freq## =10, nfix=3", "freq=10, nfix=4"), col=1:5,
## lty=rep(1,5), ncol=1)
par(opar)
unemp.bw1 <- bwfilter(unemp, drift=TRUE)
opar <- par(no.readonly=TRUE)
unemp.bw <- bwfilter(unemp)
plot(unemp.bw)
unemp.bw2 <- bwfilter(unemp, freq=8,drift=TRUE)
unemp.bw3 <- bwfilter(unemp, freq=10, nfix=3, drift=TRUE)
unemp.bw4 <- bwfilter(unemp, freq=10, nfix=4, drift=TRUE)
par(mfrow=c(2,1),mar=c(3,3,2,1),cex=.8)
plot(unemp.bw1$x,
main="Butterworth filter of unemployment: Trend,
drift=TRUE",col=1, ylab="")
lines(unemp.bw1$trend,col=2)
lines(unemp.bw2$trend,col=3)
lines(unemp.bw3$trend,col=4)
lines(unemp.bw4$trend,col=5)
legend("topleft",legend=c("series", "freq=10, nfix=2",
"freq=8, nfix=2", "freq=10, nfix=3", "freq=10, nfix=4"),
col=1:5, lty=rep(1,5), ncol=1)
plot(unemp.bw1$cycle,
main="Butterworth filter of unemployment: Cycle,drift=TRUE",
col=2, ylab="", ylim=range(unemp.bw3$cycle,na.rm=TRUE))
lines(unemp.bw2$cycle,col=3)
lines(unemp.bw3$cycle,col=4)
lines(unemp.bw4$cycle,col=5)
## legend("topleft",legend=c("series", "freq=10, nfix=2", "freq=8,
## nfix=2", "freq## =10, nfix=3", "freq=10, nfix=4"), col=1:5,
## lty=rep(1,5), ncol=1)
par(opar)
library(GENEAread)
library(reshape)
library(ggplot2)
library(mFilter)
## set working directory depending on environment
if(Sys.info()["sysname"] == "Linux") {
wd <- "~/Dropbox/MEI/NCI/tyler/geneactiv/data/"
} else {
wd <- "C:/Users/Tyler/Documents/GitHub/GENEActivR/Data/"
}
## 5-13-2014 Test Data
## Read in binary file
testfile <- read.bin(paste0(wd, "TDS_left wrist_100001_2014-05-13 10-05-34.bin"))
# Place time,x,y,z into data frame
df <- data.frame(time=testfile$time, Acc.z=testfile$z)
## testing GRTime formatting
df$time <- as.POSIXct(format(df$time, format = "%Y-%m-%d %H:%M:%S"))
View(df)
remove.packages("mFilter")
install.packages("signal")
b <- butter(df, n=5, W=c(3,11), type='pass')
library(signal)
library(signal)
b <- butter(df, n=5, W=c(3,11), type='pass')
bf <- butter(4, 0.1)
freqz(bf)
zplane(bf)
read.bin("C:/Users/Tyler/Documents/GENEActiv/Data/JS_right wrist_100001_2014-05-12 12-54-07.bin", downsample=100)
ds <- read.bin("C:/Users/Tyler/Documents/GENEActiv/Data/JS_right wrist_100001_2014-05-12 12-54-07.bin", downsample=100)
library("gaccel", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
accplot(ds)
accplot(testfile)
ggplot(ds, aes(x=time, y=value, color=variable)) + geom_line()
testfile <- ds
# Place time,x,y,z into data frame
df <- data.frame(time=testfile$time, Acc.x=testfile$x, Acc.y=testfile$y, Acc.z=testfile$z)
## testing GRTime formatting
df$time <- as.POSIXct(format(df$time, format = "%Y-%m-%d %H:%M:%S"))
# Melt into new dataframe using 'reshape' package
df.melt <- melt(df, id="time")
# Plot x,y,z vs time using 'ggplot2' package
ggplot(df.melt, aes(x=time, y=value, color=variable)) + geom_line()
install.packages("mFilter")
library(mFilter)
library(zoo)
z <- zoo(df$Acc.z, order.by=df$time)
ts(z)
t <- ts(zoo)
t <- ts(z)
plot9t
plot(t)
z <- zoo(df$Acc.z, order.by=as.POSIXct(format(df$time, format = "%Y-%m-%d %H:%M:%S"))
)
plot(ts(z))
plot(z)
filterbw(z)
bwfilter(z)
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
shiny::runApp('GitHub/GENEActivR/genea-app')
library("ggvis", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
c <- data.frame(x = c(1,2,3,4,5), y = c(5,4,3,2,1))
dev.off()
dev.off()
setwd("~/GitHub")
install.packages("httpuv")
c <- data.frame(x = c(1,2,3,4,5), y = c(5,4,3,2,1))
c %>%
ggvis(~x, ~y,
size := input_slider(10,100)
) %>%
layer_points()
library(ggvis)
library("ggvis", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
install.packages("httpuv")
library("ggvis", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
c %>%
ggvis(~x, ~y,
size := input_slider(10,100)
) %>%
layer_points()
c %>%
ggvis(~x, ~y,
size := input_slider(10,1000)
) %>%
layer_points()
## A simple test using ggvis
#' @export
vistest <- function(data, params, ...) {
data %>%
ggvis(~data$lat, ~data$lon,
size := input_slider(1,500)
) %>%
layer_points()
}
library("pilrapi", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
d <- read_pilr(pilr_server = "http://qa.pilrhealth.com", access_code = "e72a0546-5f38-4e12-a455-93bfef39d094", project = "a-eiverson-project", data_set = "pilrhealth:ezsensors:location", schema = "1")
vistest(d, params = "")
## A simple test using ggvis
#' @export
vistest <- function(data, params, ...) {
data %>%
ggvis(~data$lat, ~data$lon,
size := input_slider(1,50)
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
color = pt
) %>%
layer_points()
}
vistest(d, params = "")
View(d)
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50)
) %>%
layer_points(color = pt)
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
fill = ~pt
) %>%
layer_points() +
guide_legend(pt, orient="left")
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
fill = ~pt
) %>%
layer_points() %>%
add_legend(pt = "pt", properties = legend_props(legend = list(y = 100))
}
vistest(d, params = "")
#' @export
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
fill = ~pt
) %>%
layer_points() %>%
add_legend(pt = "pt", properties = legend_props(legend = list(y = 100)))
}
vistest(d, params = "")
#' @export
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1,50),
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1, 50),
opacity := input_slider(0, 1)
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1, 50),
opacity := input_slider(0, 1),
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1, 50, label = "size"),
opacity := input_slider(0, 1, label = "opacity"),
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
vistest <- function(data, params, ...) {
data %>%
ggvis(~lat, ~lon,
size := input_slider(1, 100, label = "size"),
opacity := input_slider(0, 1, label = "opacity"),
fill = ~pt
) %>%
layer_points()
}
vistest(d, params = "")
pilr_dashboard_panel(FUN="vistest", package="dashtest",
package_location="github",
github_info =
list(username = "tdschenk",
repository = "dashtest",
branch = "master"),
data =
list(participant = "t01",
data_set = "pilrhealth:ezsensors:location",
schema = "1"),
project = "a-eiverson-project",
pilr_server = "http://qa.pilrhealth.com",
return_type = "image",
reinstall_github_package = TRUE)
#' pilrdash.
#'
#' @name pilrdash
#' @docType package
NULL
## single exported function that all dashboards will call
## will need to be exported
#'@export
pilr_dashboard_panel <- function(FUN, package, package_location, pilr_server, access_code,
github_info, data, project, return_type,
reinstall_github_package = FALSE) {
require(httr)
## Check for missing necessary parameters
if (missing(FUN)) stop("Function parameter not specified")
if (missing(package)) stop("Package parameter not specified")
if (missing(data)) stop("Data parameter not specified")
## check if package is installed
if(!package %in% rownames(installed.packages()) || reinstall_github_package) {
## Perform checks for missing arguments and install package
if (!missing(package_location) && package_location == "github") {
if (missing(github_info)) stop("GitHub Information not specified")
if (!length(github_info$branch)) github_info$branch = "master"
if (!length(github_info$username)) stop("GitHub username not specified")
if (!length(github_info$repository)) stop("GitHub repository not specified")
## install of the package through the HTTP interface
GET(paste0(pilr_server, "/ocpu/github/", github_info$username, "/", package))
}
if (!missing(package_location) && package_location == "cran") {
install.packages(package)
}
}
libs <- paste0("/tmp/ocpu-www-data/github_library/ocpu_github_",
github_info$username, "_", package)
.libPaths(c(.libPaths(), libs,
"/tmp/ocpu-www-data/github_library/ocpu_github_meiresearchltd_pilrapi"))
require(package, character.only = TRUE)
require("pilrapi")
## Read in access code from R/pilrsecret.txt
if (missing(access_code)) {
access_code <- readLines(system.file("R/pilrsecret.txt", package = package), n = 1)
}
## Read PiLR data, what if it's a list?
df <- read_pilr(pilr_server = pilr_server,
access_code = access_code, project = project,
data_set = data$data_set, schema = data$schema)
## Parse package and function into package::function
## packFUN <- eval(parse(text=paste0(package, "::", FUN)))
packFUN <- get(FUN, pos = paste0("package:", package))
## pass everything through
params <- list(FUN = FUN, package = package, package_location = package_location,
pilr_server = pilr_server, data = data, project = project,
return_type = return_type)
## Call the requested function
do.call(packFUN, args = list(data = df, params = params))
}
pilr_dashboard_panel(FUN="vistest", package="dashtest",
package_location="github",
github_info =
list(username = "tdschenk",
repository = "dashtest",
branch = "master"),
data =
list(participant = "t01",
data_set = "pilrhealth:ezsensors:location",
schema = "1"),
project = "a-eiverson-project",
pilr_server = "http://qa.pilrhealth.com",
return_type = "image",
reinstall_github_package = TRUE)
pilr_dashboard_panel(FUN="vistest", package="dashtest",
package_location="github",
github_info =
list(username = "tdschenk",
repository = "dashtest",
branch = "master"),
data =
list(participant = "t01",
data_set = "pilrhealth:ezsensors:location",
schema = "1"),
project = "a-eiverson-project",
pilr_server = "http://qa.pilrhealth.com",
access_code = "e72a0546-5f38-4e12-a455-93bfef39d094",
return_type = "image",
reinstall_github_package = TRUE)
setwd("~/GitHub/dashtest")
load_all()
library("devtools", lib.loc="C:/Users/Tyler/Documents/R/win-library/3.1")
load_all()
load_all()
document()
document()
document()
load_all()
pilr_dashboard_panel(FUN="vistest", package="dashtest",
package_location="github",
github_info =
list(username = "tdschenk",
repository = "dashtest",
branch = "master"),
data =
list(participant = "t01",
data_set = "pilrhealth:ezsensors:location",
schema = "1"),
project = "a-eiverson-project",
pilr_server = "http://qa.pilrhealth.com",
return_type = "image",
reinstall_github_package = TRUE)
